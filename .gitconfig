[push]
    default = matching
[alias]
    # aliasコマンドを表示
    alias = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\\t => \\2/' | sort
    ad = add
    adA = add -A
    st = status
    df = diff
    df1 = diff HEAD
    df2 = diff HEAD~
    df3 = diff HEAD~~
    # 単語単位のdiff
    dw = diff --color-words
    ds = diff --staged
    co = checkout
    ci = commit -v
    make-pull-req = commit --allow-empty -m \"make pull request\"
    make-gitignore = !sh -c 'gibo ${0} > .gitignore'
    br = branch
    delete-branch = !sh -c 'git branch -D ${0}'
    # 引数が指定されていなければブランチ名をリネームしない
    rename-branch = !sh -c '   \
        test "${0}" != "sh" && \
        CURRENT_BRANCH_NAME=`git rev-parse --abbrev-ref HEAD` && \
        NEW_BRANCH_NAME=${0} && \
        git branch -m $CURRENT_BRANCH_NAME $NEW_BRANCH_NAME'
    graph = log --graph --date=short --decorate=short --pretty=format:'%Cgreen%h %Creset%cd %Cblue%cn %Cred%d %Creset%s'
    log-detail = log --stat --decorate=short --pretty=format:'%C(yellow)%h %Cgreen%cr %Cblue%cn%Cred%d %Creset%s %C(cyan)%b'
    log-merge = log --merges --pretty=format:'%C(yellow)%h %Cgreen%ci %Cblue%cn%Cred%d %Creset%s %C(cyan)%b'
    # logから検索をかけたい文字列を引数に渡すこと
    # git log-word-search hoge
    log-word-search = log --stat -S
    df-word = diff --word-diff
    browse = !hub browse
    recommit = commit --amend
    # 一つ前のコミットを削除
    one-previous-commit-hard-reset = reset --hard HEAD^
    # コミットを削除(ワークスペースに残らない)
    hard-reset = reset --hard
[core]
    # 全gitプロジェクトに反映させる.gitconfig
    excludesfile = ~/.gitignore
    # falseで日本語ファイルを文字化けせずに表示
    autocrlf = false
    editor = vim -c \"set fenc=utf-8\"
[color]
    ui = true
[ghq]
    root = ~/src
[include]
    path = ~/.gitconfig.local
[commit]
    template = ~/.gitcommit.template
[merge]
	tool = vimdiff
